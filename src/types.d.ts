import { routes } from "@/helpers/ipc/api/route";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

// API types
export type Handler = (...args: any[]) => Promise<any> | any;
export type Method = {
  name: string;
  handler: Handler;
};
export type Route = {
  name: string;
  methods: Method[];
};

export type GenerateApiContext<T extends Route[]> = {
  [K in T[number]["name"]]: {
    [M in Extract<T[number], { name: K }>["methods"][number]["name"]]: (
      ...args: Parameters<Extract<Extract<T[number], { name: K }>["methods"][number], { name: M }>["handler"]>
    ) => Promise<ReturnType<Extract<Extract<T[number], { name: K }>["methods"][number], { name: M }>["handler"]>>;
  };
};

export type ApiContext = GenerateApiContext<typeof routes>;

declare global {
  interface Window {
    themeMode: ThemeModeContext;
    electronWindow: ElectronWindow;
    api: ApiContext;
  }
}

export {};
